// Code generated by protoc-gen-go. DO NOT EDIT.
// source: is_banned_rpc.proto

package grpc_account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsBannedRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsBannedRequest) Reset()         { *m = IsBannedRequest{} }
func (m *IsBannedRequest) String() string { return proto.CompactTextString(m) }
func (*IsBannedRequest) ProtoMessage()    {}
func (*IsBannedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad28a9bbd52baa5, []int{0}
}

func (m *IsBannedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsBannedRequest.Unmarshal(m, b)
}
func (m *IsBannedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsBannedRequest.Marshal(b, m, deterministic)
}
func (m *IsBannedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsBannedRequest.Merge(m, src)
}
func (m *IsBannedRequest) XXX_Size() int {
	return xxx_messageInfo_IsBannedRequest.Size(m)
}
func (m *IsBannedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsBannedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsBannedRequest proto.InternalMessageInfo

func (m *IsBannedRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type IsBannedResponse struct {
	Banned               bool     `protobuf:"varint,1,opt,name=banned,proto3" json:"banned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsBannedResponse) Reset()         { *m = IsBannedResponse{} }
func (m *IsBannedResponse) String() string { return proto.CompactTextString(m) }
func (*IsBannedResponse) ProtoMessage()    {}
func (*IsBannedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad28a9bbd52baa5, []int{1}
}

func (m *IsBannedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsBannedResponse.Unmarshal(m, b)
}
func (m *IsBannedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsBannedResponse.Marshal(b, m, deterministic)
}
func (m *IsBannedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsBannedResponse.Merge(m, src)
}
func (m *IsBannedResponse) XXX_Size() int {
	return xxx_messageInfo_IsBannedResponse.Size(m)
}
func (m *IsBannedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsBannedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsBannedResponse proto.InternalMessageInfo

func (m *IsBannedResponse) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

func init() {
	proto.RegisterType((*IsBannedRequest)(nil), "account.IsBannedRequest")
	proto.RegisterType((*IsBannedResponse)(nil), "account.IsBannedResponse")
}

func init() {
	proto.RegisterFile("is_banned_rpc.proto", fileDescriptor_5ad28a9bbd52baa5)
}

var fileDescriptor_5ad28a9bbd52baa5 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x2c, 0x8e, 0x4f,
	0x4a, 0xcc, 0xcb, 0x4b, 0x4d, 0x89, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0x51, 0xd2, 0xe5, 0xe2, 0xf7, 0x2c, 0x76, 0x02,
	0x4b, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x71, 0x71, 0x94, 0x16, 0xa7, 0x16,
	0xe5, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xf9, 0x4a, 0x5a, 0x5c,
	0x02, 0x08, 0xe5, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0x10, 0xf3, 0xc1,
	0xaa, 0x39, 0x82, 0xa0, 0x3c, 0x27, 0xc1, 0x28, 0x7e, 0x3d, 0x7d, 0xeb, 0xf4, 0xa2, 0x82, 0xe4,
	0x78, 0xa8, 0x6d, 0x49, 0x6c, 0x60, 0xdb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x24, 0x98,
	0x07, 0xbb, 0x94, 0x00, 0x00, 0x00,
}
