// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: miiverse_service.proto

package miiverse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiiverseClient is the client API for Miiverse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiiverseClient interface {
	// Used by Super Mario Maker
	SMMRequestPostId(ctx context.Context, in *SMMRequestPostIdRequest, opts ...grpc.CallOption) (*SMMRequestPostIdResponse, error)
}

type miiverseClient struct {
	cc grpc.ClientConnInterface
}

func NewMiiverseClient(cc grpc.ClientConnInterface) MiiverseClient {
	return &miiverseClient{cc}
}

func (c *miiverseClient) SMMRequestPostId(ctx context.Context, in *SMMRequestPostIdRequest, opts ...grpc.CallOption) (*SMMRequestPostIdResponse, error) {
	out := new(SMMRequestPostIdResponse)
	err := c.cc.Invoke(ctx, "/miiverse.Miiverse/SMMRequestPostId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiiverseServer is the server API for Miiverse service.
// All implementations must embed UnimplementedMiiverseServer
// for forward compatibility
type MiiverseServer interface {
	// Used by Super Mario Maker
	SMMRequestPostId(context.Context, *SMMRequestPostIdRequest) (*SMMRequestPostIdResponse, error)
	mustEmbedUnimplementedMiiverseServer()
}

// UnimplementedMiiverseServer must be embedded to have forward compatible implementations.
type UnimplementedMiiverseServer struct {
}

func (UnimplementedMiiverseServer) SMMRequestPostId(context.Context, *SMMRequestPostIdRequest) (*SMMRequestPostIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMMRequestPostId not implemented")
}
func (UnimplementedMiiverseServer) mustEmbedUnimplementedMiiverseServer() {}

// UnsafeMiiverseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiiverseServer will
// result in compilation errors.
type UnsafeMiiverseServer interface {
	mustEmbedUnimplementedMiiverseServer()
}

func RegisterMiiverseServer(s grpc.ServiceRegistrar, srv MiiverseServer) {
	s.RegisterService(&Miiverse_ServiceDesc, srv)
}

func _Miiverse_SMMRequestPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMMRequestPostIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiiverseServer).SMMRequestPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miiverse.Miiverse/SMMRequestPostId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiiverseServer).SMMRequestPostId(ctx, req.(*SMMRequestPostIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Miiverse_ServiceDesc is the grpc.ServiceDesc for Miiverse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Miiverse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miiverse.Miiverse",
	HandlerType: (*MiiverseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SMMRequestPostId",
			Handler:    _Miiverse_SMMRequestPostId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miiverse_service.proto",
}
